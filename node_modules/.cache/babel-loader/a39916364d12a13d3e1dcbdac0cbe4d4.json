{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DmitryDima\\\\Desktop\\\\React-bookmarking-urls-master\\\\React-bookmarking-urls-master\\\\my-app\\\\src\\\\components\\\\Cart\\\\CartContextProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/React.createContext({});\nexport default function CartContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [cart, setCart] = useState([]);\n\n  const addToCart = product => {\n    setCart([...cart, product]);\n  };\n\n  useEffect(() => {\n    const getBookmarks = async () => {\n      setLoading(true);\n      const bookmarks = JSON.parse(localStorage.getItem('bookmarks'));\n      setArticles(bookmarks);\n      setLoading(false);\n    };\n\n    getBookmarks();\n  }, []);\n  localStorage.setItem(\"myKey\", JSON.stringify(cart));\n  var arr = JSON.parse(localStorage.getItem(\"myKey\"));\n\n  const removeFromCart = product => {\n    const temp = [...cart];\n    const index = temp.findIndex(cp => cp.id === product.id);\n    temp.splice(index, 1);\n    setCart(temp);\n  };\n\n  const values = {\n    addToCart,\n    cart,\n    arr,\n    removeFromCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n}\n\n_s(CartContextProvider, \"5+HPoxSo1E/C3go3F1eDhM/DDhE=\");\n\n_c = CartContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["C:/Users/DmitryDima/Desktop/React-bookmarking-urls-master/React-bookmarking-urls-master/my-app/src/components/Cart/CartContextProvider.js"],"names":["React","useState","CartContext","createContext","CartContextProvider","children","cart","setCart","addToCart","product","useEffect","getBookmarks","setLoading","bookmarks","JSON","parse","localStorage","getItem","setArticles","setItem","stringify","arr","removeFromCart","temp","index","findIndex","cp","id","splice","values"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB,EAApB,CAApB;AAEP,eAAe,SAASC,mBAAT,OAA2C;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACxD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMO,SAAS,GAAIC,OAAD,IAAa;AAC7BF,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUG,OAAV,CAAD,CAAP;AACD,GAFD;;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMC,YAAY,GAAG,YAAY;AAC7BC,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAAlB;AACAC,MAAAA,WAAW,CAACL,SAAD,CAAX;AACAD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KALD;;AAMAD,IAAAA,YAAY;AACf,GARU,EAQR,EARQ,CAAT;AAUAK,EAAAA,YAAY,CAACG,OAAb,CAAqB,OAArB,EAA6BL,IAAI,CAACM,SAAL,CAAed,IAAf,CAA7B;AACA,MAAIe,GAAG,GAAGP,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAV;;AACA,QAAMK,cAAc,GAAIb,OAAD,IAAa;AAClC,UAAMc,IAAI,GAAG,CAAC,GAAGjB,IAAJ,CAAb;AACA,UAAMkB,KAAK,GAAGD,IAAI,CAACE,SAAL,CAAgBC,EAAD,IAAQA,EAAE,CAACC,EAAH,KAAUlB,OAAO,CAACkB,EAAzC,CAAd;AACAJ,IAAAA,IAAI,CAACK,MAAL,CAAYJ,KAAZ,EAAmB,CAAnB;AACAjB,IAAAA,OAAO,CAACgB,IAAD,CAAP;AACD,GALD;;AAOA,QAAMM,MAAM,GAAG;AACbrB,IAAAA,SADa;AAEbF,IAAAA,IAFa;AAGbe,IAAAA,GAHa;AAIbC,IAAAA;AAJa,GAAf;AAQA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEO,MAA7B;AAAA,cAAsCxB;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAnCuBD,mB;;KAAAA,mB","sourcesContent":["import React, { useState } from \"react\";\n\nexport const CartContext = React.createContext({});\n\nexport default function CartContextProvider({ children }) {\n  const [cart, setCart] = useState([]);\n\n  const addToCart = (product) => {\n    setCart([...cart, product]);\n  }\n  \n  useEffect(() => {\n    const getBookmarks = async () => {\n        setLoading(true)\n        const bookmarks = JSON.parse(localStorage.getItem('bookmarks'))\n        setArticles(bookmarks)\n        setLoading(false)\n    }\n    getBookmarks()\n}, [])\n\n  localStorage.setItem(\"myKey\",JSON.stringify(cart));\n  var arr = JSON.parse(localStorage.getItem(\"myKey\"));\n  const removeFromCart = (product) => {\n    const temp = [...cart];\n    const index = temp.findIndex((cp) => cp.id === product.id);\n    temp.splice(index, 1);\n    setCart(temp);\n  };\n\n  const values = {\n    addToCart,\n    cart,\n    arr,\n    removeFromCart\n\n  };\n\n  return <CartContext.Provider value={values}>{children}</CartContext.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}