{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DmitryDima\\\\Desktop\\\\React-bookmarking-urls-master\\\\React-bookmarking-urls-master\\\\my-app\\\\src\\\\components\\\\Cart\\\\index.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { useCart } from \"../../hooks/cart/useCart\";\nimport Pagination from '../Pagination';\nimport { Link } from \"react-router-dom\";\nimport Inform from \"../Main/Inform\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CartPage() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [newsPerPage] = useState(3);\n  let [posts, setPosts] = useState();\n  const [news, SetNews] = useState([]);\n  const [input, setInput] = useState('');\n  let [limit, setLimit] = useState(50);\n  let [publishedAt, setPublishedAt] = useState(\"publishedAt\");\n  let [btn, setBtn] = useState(\"main-btn\");\n  let [loader, setLoader] = useState(\"hidden\");\n  const {\n    cart\n  } = useCart();\n  const items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\n  let getNews = () => {\n    async function getData() {\n      SetNews(cart);\n      setPosts(cart.map(item => /*#__PURE__*/_jsxDEV(Inform, {\n        data: item\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 35\n      }, this)));\n      setLoader(\"hidden\");\n      setBtn(\"main-btn\");\n    }\n\n    getData();\n  };\n\n  const showMore = () => {\n    setLoader(\"loader\");\n    setLimit(prevLimit => prevLimit + 1);\n  };\n\n  const body = {\n    background: \"#002137\"\n  };\n\n  const showMore1 = () => {\n    setLoader(\"loader\");\n    setLimit(prevLimit => prevLimit - 1);\n  };\n\n  function Items(_ref) {\n    let {\n      currentItems\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Item #\", item]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this))\n    }, void 0, false);\n  }\n\n  function PaginatedItems(_ref2) {\n    _s();\n\n    let {\n      itemsPerPage\n    } = _ref2;\n    // We start with an empty list of items.\n    const [currentItems, setCurrentItems] = useState(null);\n    const [pageCount, setPageCount] = useState(0); // Here we use item offsets; we could also use page offsets\n    // following the API or data you're working with.\n\n    const [itemOffset, setItemOffset] = useState(0);\n    useEffect(() => {\n      // Fetch items from another resources.\n      const endOffset = itemOffset + itemsPerPage;\n      console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n      setCurrentItems(items.slice(itemOffset, endOffset));\n      setPageCount(Math.ceil(items.length / itemsPerPage));\n    }, [itemOffset, itemsPerPage]); // Invoke when user click to request another page.\n\n    const handlePageClick = event => {\n      const newOffset = event.selected * itemsPerPage % items.length;\n      console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n      setItemOffset(newOffset);\n    };\n  }\n\n  _s(PaginatedItems, \"HTeX8cSP+G2jiDQZoJcFFLxPhRM=\");\n\n  useEffect(getNews, [limit]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            children: posts\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"center\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: btn,\n        onClick: showMore,\n        children: \"Page BackWard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: btn,\n        onClick: showMore1,\n        children: \"Page Forward\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(CartPage, \"3UcPPqMxmCYYSdl663xYft9kt78=\", false, function () {\n  return [useCart];\n});\n\n_c = CartPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartPage\");","map":{"version":3,"sources":["C:/Users/DmitryDima/Desktop/React-bookmarking-urls-master/React-bookmarking-urls-master/my-app/src/components/Cart/index.js"],"names":["React","useContext","useState","useEffect","useCart","Pagination","Link","Inform","CartPage","currentPage","setCurrentPage","newsPerPage","posts","setPosts","news","SetNews","input","setInput","limit","setLimit","publishedAt","setPublishedAt","btn","setBtn","loader","setLoader","cart","items","getNews","getData","map","item","id","showMore","prevLimit","body","background","showMore1","Items","currentItems","PaginatedItems","itemsPerPage","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","console","log","slice","Math","ceil","length","handlePageClick","event","newOffset","selected"],"mappings":"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","sourcesContent":["import React, { useContext,useState,useEffect } from \"react\";\nimport { useCart } from \"../../hooks/cart/useCart\";\nimport Pagination from '../Pagination';\nimport { Link } from \"react-router-dom\";\nimport Inform from \"../Main/Inform\";\nexport default function CartPage() {\n\n\n  const [currentPage, setCurrentPage] = useState(1)\n  const [newsPerPage] = useState(3)\n  let [posts, setPosts] = useState(\n    );\n    const [news, SetNews] = useState([])\n    const [input, setInput] = useState('');\n    let [limit, setLimit] = useState(50);\n    let [publishedAt, setPublishedAt] = useState(\"publishedAt\");\n    let [btn, setBtn] = useState(\"main-btn\");\n    let [loader, setLoader] = useState(\"hidden\");\n  \n  const { cart } = useCart();\n  const items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\n  \n\n  \n  let getNews = () => {\n    async function getData() {\n \n     \n      SetNews(cart);\n  \n      setPosts(cart.map((item) => <Inform key={item.id} data={item} />));\n      setLoader(\"hidden\");\n      setBtn(\"main-btn\");\n    }\n    getData();\n  };\n  const showMore = () => {\n\n    setLoader(\"loader\");\n    setLimit((prevLimit) => prevLimit + 1);\n\n\n  };\n  const body = {\n    background: \"#002137\"\n  }\n\n  const showMore1 = () => {\n\n    setLoader(\"loader\");\n    setLimit((prevLimit) => prevLimit - 1);\n\n\n  };\n  function Items({ currentItems }) {\n    return (\n      <>\n        {currentItems &&\n          currentItems.map((item) => (\n            <div>\n              <h3>Item #{item}</h3>\n            </div>\n          ))}\n      </>\n    );\n  }\n  \n  function PaginatedItems({ itemsPerPage }) {\n    // We start with an empty list of items.\n    const [currentItems, setCurrentItems] = useState(null);\n    const [pageCount, setPageCount] = useState(0);\n    // Here we use item offsets; we could also use page offsets\n    // following the API or data you're working with.\n    const [itemOffset, setItemOffset] = useState(0);\n  \n    useEffect(() => {\n      // Fetch items from another resources.\n      const endOffset = itemOffset + itemsPerPage;\n      console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n      setCurrentItems(items.slice(itemOffset, endOffset));\n      setPageCount(Math.ceil(items.length / itemsPerPage));\n    }, [itemOffset, itemsPerPage]);\n  \n    // Invoke when user click to request another page.\n    const handlePageClick = (event) => {\n      const newOffset = (event.selected * itemsPerPage) % items.length;\n      console.log(\n        `User requested page number ${event.selected}, which is offset ${newOffset}`\n      );\n      setItemOffset(newOffset);\n    };\n  }\n  useEffect(getNews, [limit]);\n\n  return (\n    <>\n    <Items currentItems={currentItems} />\n    <ReactPaginate\n        breakLabel=\"...\"\n        nextLabel=\"next >\"\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={5}\n        pageCount={pageCount}\n        previousLabel=\"< previous\"\n        renderOnZeroPageCount={null}\n      />\n      \n    <div>\n      <table className=\"table\">\n        <tbody>         \n              <td>{posts}</td>\n        </tbody>\n\n<center></center>\n      </table>\n      <button className={btn} onClick={showMore}>\n            Page BackWard\n          </button>\n          <button className={btn} onClick={showMore1}>\n            Page Forward\n          </button>\n      \n    </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}